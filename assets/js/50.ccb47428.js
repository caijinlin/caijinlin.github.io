(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{320:function(t,a,e){"use strict";e.r(a);var n=e(14),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本文目录如下，阅读本文后，将一网打尽下面Golang Map相关面试题")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Map.png",alt:""}})]),t._v(" "),a("h1",{attrs:{id:"面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试题"}},[t._v("#")]),t._v(" 面试题")]),t._v(" "),a("ol",[a("li",[t._v("channel的底层实现原理")]),t._v(" "),a("li",[t._v("channel 是否线程安全?")]),t._v(" "),a("li",[t._v("nil、关闭的 channel、有数据的 channel，再进行读、写、关闭会怎么样？")]),t._v(" "),a("li",[t._v("向 channel 发送数据和从 channel 读数据的流程是什么样的?")])]),t._v(" "),a("h1",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[t._v("Go中的map是一个指针，占用8个字节，指向hmap结构体;  源码"),a("code",[t._v("src/runtime/map.go")]),t._v("中可以看到map的底层结构")]),t._v(" "),a("p",[t._v("每个map的底层结构是hmap，hmap包含若干个结构为bmap的bucket数组。每个bucket底层都采用链表结构。接下来，我们来详细看下map的结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/map_mem_struct.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"hmap结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hmap结构体"}},[t._v("#")]),t._v(" hmap结构体")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// A header for a Go map.\ntype hmap struct {\n    count     int \n    // 代表哈希表中的元素个数，调用len(map)时，返回的就是该字段值。\n    flags     uint8 \n    // 状态标志，下文常量中会解释四种状态位含义。\n    B         uint8  \n    // buckets（桶）的对数log_2\n    // 如果B=5，则buckets数组的长度 = 2^5=32，意味着有32个桶\n    noverflow uint16 \n    // 溢出桶的大概数量\n    hash0     uint32 \n    // 哈希种子\n\n    buckets    unsafe.Pointer \n    // 指向buckets数组的指针，数组大小为2^B，如果元素个数为0，它为nil。\n    oldbuckets unsafe.Pointer \n    // 如果发生扩容，oldbuckets是指向老的buckets数组的指针，老的buckets数组大小是新的buckets的1/2;非扩容状态下，它为nil。\n    nevacuate  uintptr        \n    // 表示扩容进度，小于此地址的buckets代表已搬迁完成。\n\n    extra *mapextra \n    // 这个字段是为了优化GC扫描而设计的。当key和value均不包含指针，并且都可以inline时使用。extra是指向mapextra类型的指针。\n }\n")])])]),a("h2",{attrs:{id:"bmap结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bmap结构体"}},[t._v("#")]),t._v(" bmap结构体")]),t._v(" "),a("p",[a("code",[t._v("bmap")]),t._v(" 就是我们常说的“桶”，一个桶里面会最多装 8 个 key，这些 key 之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的，关于key的定位我们在map的查询和插入中详细说明。在桶内，又会根据 key 计算出来的 hash 值的高 8 位来决定 key 到底落入桶内的哪个位置（一个桶内最多有8个位置)。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// A bucket for a Go map.\ntype bmap struct {\n    tophash [bucketCnt]uint8        \n    // len为8的数组\n    // 用来快速定位key是否在这个bmap中\n    // 桶的槽位数组，一个桶最多8个槽位，如果key所在的槽位在tophash中，则代表该key在这个桶中\n}\n//底层定义的常量 \nconst (\n    bucketCntBits = 3\n    bucketCnt     = 1 << bucketCntBits\n    // 一个桶最多8个位置\n）\n\n但这只是表面(src/runtime/hashmap.go)的结构，编译期间会给它加料，动态地创建一个新的结构：\n\ntype bmap struct {\n  topbits  [8]uint8\n  keys     [8]keytype\n  values   [8]valuetype\n  pad      uintptr\n  overflow uintptr\n  // 溢出桶\n}\n")])])]),a("p",[t._v("bucket内存数据结构可视化如下：")]),t._v(" "),a("p",[t._v("注意到 key 和 value 是各自放在一起的，并不是 "),a("code",[t._v("key/value/key/value/...")]),t._v(" 这样的形式。源码里说明这样的好处是在某些情况下可以省略掉 padding字段，节省内存空间。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220111201336370.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"mapextra结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mapextra结构体"}},[t._v("#")]),t._v(" mapextra结构体")]),t._v(" "),a("p",[t._v("当 map 的 key 和 value 都不是指针，并且 size 都小于 128 字节的情况下，会把 bmap 标记为不含指针，这样可以避免 gc 时扫描整个 hmap。但是，我们看 bmap 其实有一个 overflow 的字段，是指针类型的，破坏了 bmap 不含指针的设想，这时会把 overflow 移动到 extra 字段来。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// mapextra holds fields that are not present on all maps.\ntype mapextra struct {\n    // 如果 key 和 value 都不包含指针，并且可以被 inline(<=128 字节)\n    // 就使用 hmap的extra字段 来存储 overflow buckets，这样可以避免 GC 扫描整个 map\n    // 然而 bmap.overflow 也是个指针。这时候我们只能把这些 overflow 的指针\n    // 都放在 hmap.extra.overflow 和 hmap.extra.oldoverflow 中了\n    // overflow 包含的是 hmap.buckets 的 overflow 的 buckets\n    // oldoverflow 包含扩容时的 hmap.oldbuckets 的 overflow 的 bucket\n    overflow    *[]*bmap\n    oldoverflow *[]*bmap\n\n\t\tnextOverflow *bmap\t\n\t// 指向空闲的 overflow bucket 的指针\n}\n")])])]),a("h1",{attrs:{id:"主要特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要特性"}},[t._v("#")]),t._v(" 主要特性")]),t._v(" "),a("h2",{attrs:{id:"引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),a("p",[t._v("map是个指针，底层指向hmap，所以是个引用类型")]),t._v(" "),a("p",[t._v("golang 有三个常用的高级类型"),a("em",[t._v("slice")]),t._v("、map、channel,  它们都是"),a("em",[t._v("引用类型")]),t._v("，当引用类型作为函数参数时，可能会修改原内容数据。")]),t._v(" "),a("p",[t._v("golang 中没有引用传递，只有值和指针传递。所以 map 作为函数实参传递时本质上也是值传递，只不过因为 map 底层数据结构是通过指针指向实际的元素存储空间，在被调函数中修改 map，对调用者同样可见，所以 map 作为函数实参传递时表现出了引用传递的效果。")]),t._v(" "),a("p",[t._v("因此，传递 map 时，如果想修改map的内容而不是map本身，函数形参无需使用指针")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func TestSliceFn(t *testing.T) {\n\tm := map[string]int{}\n\tt.Log(m, len(m))\n\t// map[a:1]\n\tmapAppend(m, "b", 2)\n\tt.Log(m, len(m))\n\t// map[a:1 b:2] 2\n}\n\nfunc mapAppend(m map[string]int, key string, val int) {\n\tm[key] = val\n}\n')])])]),a("h2",{attrs:{id:"共享存储空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享存储空间"}},[t._v("#")]),t._v(" 共享存储空间")]),t._v(" "),a("p",[a("em",[t._v("map")]),t._v(" 底层数据结构是通过指针指向实际的元素"),a("em",[t._v("存储空间")]),t._v(" ，这种情况下，对其中一个map的更改，会影响到其他map")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func TestMapShareMemory(t *testing.T) {\n\tm1 := map[string]int{}\n\tm2 := m1\n\tm1["a"] = 1\n\tt.Log(m1, len(m1))\n\t// map[a:1] 1\n\tt.Log(m2, len(m2))\n\t// map[a:1]\n}\n')])])]),a("h2",{attrs:{id:"遍历顺序随机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历顺序随机"}},[t._v("#")]),t._v(" 遍历顺序随机")]),t._v(" "),a("p",[t._v("map 在没有被修改的情况下，使用 range 多次遍历 map 时输出的 key 和 value 的顺序可能不同。这是 Go 语言的设计者们有意为之，在每次 range 时的顺序被随机化，旨在提示开发者们，Go 底层实现并不保证 map 遍历顺序稳定，请大家不要依赖 range 遍历结果顺序。")]),t._v(" "),a("p",[t._v("map 本身是无序的，且遍历时顺序还会被随机化，如果想顺序遍历 map，需要对 map key 先排序，再按照 key 的顺序遍历 map。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func TestMapRange(t *testing.T) {\n\tm := map[int]string{1: "a", 2: "b", 3: "c"}\n\tt.Log("first range:")\n\t// 默认无序遍历\n\tfor i, v := range m {\n\t\tt.Logf("m[%v]=%v ", i, v)\n\t}\n\tt.Log("\\nsecond range:")\n\tfor i, v := range m {\n\t\tt.Logf("m[%v]=%v ", i, v)\n\t}\n\n\t// 实现有序遍历\n\tvar sl []int\n\t// 把 key 单独取出放到切片\n\tfor k := range m {\n\t\tsl = append(sl, k)\n\t}\n\t// 排序切片\n\tsort.Ints(sl)\n\t// 以切片中的 key 顺序遍历 map 就是有序的了\n\tfor _, k := range sl {\n\t\tt.Log(k, m[k])\n\t}\n}\n')])])]),a("h2",{attrs:{id:"非线程安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非线程安全"}},[t._v("#")]),t._v(" 非线程安全")]),t._v(" "),a("p",[t._v("map默认是并发不安全的，原因如下：")]),t._v(" "),a("p",[t._v("Go 官方在经过了长时间的讨论后，认为 Go map 更应适配典型使用场景（不需要从多个 goroutine 中进行安全访问），而不是为了小部分情况（并发访问），导致大部分程序付出加锁代价（性能），决定了不支持。")]),t._v(" "),a("p",[t._v("场景:  2个协程同时读和写，以下程序会出现致命错误：fatal error: concurrent map writes")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func main() {\n    \n\tm := make(map[int]int)\n\tgo func() {\n    \t\t\t\t//开一个协程写map\n\t\tfor i := 0; i < 10000; i++ {\n    \n\t\t\tm[i] = i\n\t\t}\n\t}()\n\n\tgo func() {\n    \t\t\t\t//开一个协程读map\n\t\tfor i := 0; i < 10000; i++ {\n    \n\t\t\tfmt.Println(m[i])\n\t\t}\n\t}()\n\n\t//time.Sleep(time.Second * 20)\n\tfor {\n    \n\t\t;\n\t}\n}\n")])])]),a("p",[t._v("如果想实现map线程安全，有两种方式：")]),t._v(" "),a("p",[t._v("方式一：使用读写锁  "),a("code",[t._v("map")]),t._v(" +  "),a("code",[t._v("sync.RWMutex")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func BenchmarkMapConcurrencySafeByMutex(b *testing.B) {\n\tvar lock sync.Mutex //互斥锁\n\tm := make(map[int]int, 0)\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < b.N; i++ {\n\t\twg.Add(1)\n\t\tgo func(i int) {\n\t\t\tdefer wg.Done()\n\t\t\tlock.Lock()\n\t\t\tdefer lock.Unlock()\n\t\t\tm[i] = i\n\t\t}(i)\n\t}\n\twg.Wait()\n\tb.Log(len(m), b.N)\n}\n")])])]),a("p",[t._v("方式二：使用golang提供的 "),a("code",[t._v("sync.Map")])]),t._v(" "),a("p",[t._v("sync.map是用读写分离实现的，其思想是空间换时间。和map+RWLock的实现方式相比，它做了一些优化：可以无锁访问read map，而且会优先操作read map，倘若只操作read map就可以满足要求(增删改查遍历)，那就不用去操作write map(它的读写都要加锁)，所以在某些特定场景中它发生锁竞争的频率会远远小于map+RWLock的实现方式。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func BenchmarkMapConcurrencySafeBySyncMap(b *testing.B) {\n\tvar m sync.Map\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < b.N; i++ {\n\t\twg.Add(1)\n\t\tgo func(i int) {\n\t\t\tdefer wg.Done()\n\t\t\tm.Store(i, i)\n\t\t}(i)\n\t}\n\twg.Wait()\n\tb.Log(b.N)\n}\n")])])]),a("h2",{attrs:{id:"哈希冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哈希冲突"}},[t._v("#")]),t._v(" 哈希冲突")]),t._v(" "),a("p",[t._v("golang中map是一个kv对集合。底层使用hash table，用链表来解决冲突 ，出现冲突时，不是每一个key都申请一个结构通过链表串起来，而是以bmap为最小粒度挂载，一个bmap可以放8个kv。在哈希函数的选择上，会在程序启动时，检测 cpu 是否支持 aes，如果支持，则使用 aes hash，否则使用 memhash。")]),t._v(" "),a("h1",{attrs:{id:"常用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作"}},[t._v("#")]),t._v(" 常用操作")]),t._v(" "),a("h2",{attrs:{id:"创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[t._v("#")]),t._v(" 创建")]),t._v(" "),a("p",[t._v("map有3钟初始化方式，一般通过make方式创建")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func TestMapInit(t *testing.T) {\n\t// 初始化方式1：直接声明\n\t// var m1 map[string]int\n\t// m1["a"] = 1\n\t// t.Log(m1, unsafe.Sizeof(m1))\n\t// panic: assignment to entry in nil map\n\t// 向 map 写入要非常小心，因为向未初始化的 map（值为 nil）写入会引发 panic，所以向 map 写入时需先进行判空操作\n\n\t// 初始化方式2：使用字面量\n\tm2 := map[string]int{}\n\tm2["a"] = 2\n\tt.Log(m2, unsafe.Sizeof(m2))\n\t// map[a:2] 8\n\n\t// 初始化方式3：使用make创建\n\tm3 := make(map[string]int)\n\tm3["a"] = 3\n\tt.Log(m3, unsafe.Sizeof(m3))\n\t// map[a:3] 8\n}\n')])])]),a("p",[t._v("map的创建通过生成汇编码可以知道，make创建map时调用的底层函数是"),a("code",[t._v("runtime.makemap")]),t._v("。如果你的map初始容量小于等于8会发现走的是"),a("code",[t._v("runtime.fastrand")]),t._v("是因为容量小于8时不需要生成多个桶，一个桶的容量就可以满足")]),t._v(" "),a("h4",{attrs:{id:"创建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建流程"}},[t._v("#")]),t._v(" 创建流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220117192217943.png",alt:""}})]),t._v(" "),a("p",[t._v("makemap函数会通过 "),a("code",[t._v("fastrand")]),t._v(" 创建一个随机的哈希种子，然后根据传入的 "),a("code",[t._v("hint")]),t._v(" 计算出需要的最小需要的桶的数量，最后再使用 "),a("code",[t._v("makeBucketArray")]),t._v("创建用于保存桶的数组，这个方法其实就是根据传入的 "),a("code",[t._v("B")]),t._v(" 计算出的需要创建的桶数量在内存中分配一片连续的空间用于存储数据，在创建桶的过程中还会额外创建一些用于保存溢出数据的桶，数量是 "),a("code",[t._v("2^(B-4)")]),t._v(" 个。初始化完成返回hmap指针。")]),t._v(" "),a("h4",{attrs:{id:"计算b的初始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算b的初始值"}},[t._v("#")]),t._v(" 计算B的初始值")]),t._v(" "),a("p",[t._v("找到一个 B，使得 map 的装载因子在正常范围内")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("B := uint8(0)\nfor overLoadFactor(hint, B) {\n\tB++\n}\nh.B = B\n\n// overLoadFactor reports whether count items placed in 1<<B buckets is over loadFactor.\nfunc overLoadFactor(count int, B uint8) bool {\n\treturn count > bucketCnt && uintptr(count) > loadFactorNum*(bucketShift(B)/loadFactorDen)\n}\n")])])]),a("h2",{attrs:{id:"查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),a("p",[t._v("Go 语言中读取 map 有两种语法：带 comma 和 不带 comma。当要查询的 key 不在 map 里，带 comma 的用法会返回一个 bool 型变量提示 key 是否在 map 中；而不带 comma 的语句则会返回一个 value 类型的零值。如果 value 是 int 型就会返回 0，如果 value 是 string 类型，就会返回空字符串。")]),t._v(" "),a("div",{staticClass:"language-stylus extra-class"},[a("pre",{pre:!0,attrs:{class:"language-stylus"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不带 comma 用法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable-declaration"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("\nfmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token func"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value:%s"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 带 comma 用法")]),t._v("\nvalue, ok "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("= m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token statement"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" ok "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("\n    fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token func"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value:%s"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("map的查找通过生成汇编码可以知道，根据 key 的不同类型，编译器会将查找函数用更具体的函数替换，以优化效率：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("key 类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("查找")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapaccess1_fast32(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, key uint32) unsafe.Pointer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapaccess2_fast32(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, key uint32) (unsafe.Pointer, bool)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapaccess1_fast64(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, key uint64) unsafe.Pointer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapaccess2_fast64(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, key uint64) (unsafe.Pointer, bool)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapaccess1_faststr(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, ky string) unsafe.Pointer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapaccess2_faststr(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, ky string) (unsafe.Pointer, bool)")])])])]),t._v(" "),a("h4",{attrs:{id:"查找流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找流程"}},[t._v("#")]),t._v(" 查找流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220117201006909.png",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"写保护监测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写保护监测"}},[t._v("#")]),t._v(" 写保护监测")]),t._v(" "),a("p",[t._v("函数首先会检查 map 的标志位 flags。如果 flags 的写标志位此时被置 1 了，说明有其他协程在执行“写”操作，进而导致程序 panic。这也说明了 map 对协程是不安全的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if h.flags&hashWriting != 0 {\n\tthrow("concurrent map read and map write")\n}\n')])])]),a("h4",{attrs:{id:"计算hash值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算hash值"}},[t._v("#")]),t._v(" 计算hash值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("hash := t.hasher(noescape(unsafe.Pointer(&ky)), uintptr(h.hash0))\n")])])]),a("p",[t._v("key经过哈希函数计算后，得到的哈希值如下（主流64位机下共 64 个 bit 位）：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" 10010111 | 000011110110110010001111001010100010010110010101010 │ 01010\n")])])]),a("h4",{attrs:{id:"找到hash对应的bucket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#找到hash对应的bucket"}},[t._v("#")]),t._v(" 找到hash对应的bucket")]),t._v(" "),a("p",[t._v("m: 桶的个数")]),t._v(" "),a("p",[t._v("从buckets 通过 hash & m 得到对应的bucket，如果bucket正在扩容，并且没有扩容完成，则从oldbuckets得到对应的bucket")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("m := bucketMask(h.B)\nb := (*bmap)(add(h.buckets, (hash&m)*uintptr(t.bucketsize)))\n// m个桶对应B个位\nif c := h.oldbuckets; c != nil {\n  if !h.sameSizeGrow() {\n  \t// 扩容前m是之前的一半\n  \tm >>= 1\n  }\n  oldb := (*bmap)(add(c, (hash&m)*uintptr(t.bucketsize)))\n  if !evacuated(oldb) {\n\t  b = oldb\n\t}\n}\n")])])]),a("p",[t._v("计算hash所在桶编号：")]),t._v(" "),a("p",[t._v("用上一步哈希值最后的 5 个 bit 位，也就是 "),a("code",[t._v("01010")]),t._v("，值为 10，也就是 10 号桶（范围是0~31号桶）")]),t._v(" "),a("h4",{attrs:{id:"遍历bucket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历bucket"}},[t._v("#")]),t._v(" 遍历bucket")]),t._v(" "),a("p",[t._v("计算hash所在的槽位:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("top := tophash(hash)\nfunc tophash(hash uintptr) uint8 {\n\ttop := uint8(hash >> (goarch.PtrSize*8 - 8))\n\tif top < minTopHash {\n\t\ttop += minTopHash\n\t}\n\treturn top\n}\n")])])]),a("p",[t._v("用上一步哈希值哈希值的高8个bit 位，也就是"),a("code",[t._v("10010111")]),t._v("，转化为十进制，也就是151，在 10 号 bucket 中寻找** tophash 值（HOB hash）为 151* 的 槽位**，即为key所在位置，找到了 2 号槽位，这样整个查找过程就结束了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://static.sitestack.cn/projects/qcrao-Go-Questions/f39e10e1474fda593cbca86eb0c517e2.png",alt:"img"}})]),t._v(" "),a("p",[t._v("如果在 bucket 中没找到，并且 overflow 不为空，还要继续去 overflow bucket 中寻找，直到找到或是所有的 key 槽位都找遍了，包括所有的 overflow bucket。")]),t._v(" "),a("h4",{attrs:{id:"返回key对应的指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回key对应的指针"}},[t._v("#")]),t._v(" 返回key对应的指针")]),t._v(" "),a("p",[t._v("通过上面找到了对应的槽位，这里我们再详细分析下key/value值是如何获取的：")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key 定位公式")]),t._v("\nk "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dataOffset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keysize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value 定位公式")]),t._v("\nv"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Pointer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("dataOffset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("bucketCnt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keysize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valuesize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//对于 bmap 起始地址的偏移：")]),t._v("\ndataOffset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unsafe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Offsetof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  b bmap\n  v "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("bucket 里 key 的起始地址就是 unsafe.Pointer(b)+dataOffset。第 i 个 key 的地址就要在此基础上跨过 i 个 key 的大小；而我们又知道，value 的地址是在所有 key 之后，因此第 i 个 value 的地址还需要加上所有 key 的偏移。")]),t._v(" "),a("h2",{attrs:{id:"赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值"}},[t._v("#")]),t._v(" 赋值")]),t._v(" "),a("p",[t._v("通过汇编语言可以看到，向 map 中插入或者修改 key，最终调用的是 "),a("code",[t._v("mapassign")]),t._v(" 函数。")]),t._v(" "),a("p",[t._v("实际上插入或修改 key 的语法是一样的，只不过前者操作的 key 在 map 中不存在，而后者操作的 key 存在 map 中。")]),t._v(" "),a("p",[t._v("mapassign 有一个系列的函数，根据 key 类型的不同，编译器会将其优化为相应的“快速函数”。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("key 类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("插入")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapassign_fast32(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, key uint32) unsafe.Pointer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapassign_fast64(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, key uint64) unsafe.Pointer")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("mapassign_faststr(t "),a("em",[t._v("maptype, h")]),t._v(" hmap, ky string) unsafe.Pointer")])])])]),t._v(" "),a("p",[t._v("我们只用研究最一般的赋值函数 "),a("code",[t._v("mapassign")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"赋值流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值流程"}},[t._v("#")]),t._v(" 赋值流程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/caijinlin/imgcdn/image-20220122215940713.png",alt:""}})]),t._v(" "),a("p",[t._v("map的赋值会附带着map的扩容和迁移，map的扩容只是将底层数组扩大了一倍，并没有进行数据的转移，数据的转移是在扩容后逐步进行的，在迁移的过程中每进行一次赋值（access或者delete）会至少做一次迁移工作。")]),t._v(" "),a("h4",{attrs:{id:"校验和初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#校验和初始化"}},[t._v("#")]),t._v(" 校验和初始化")]),t._v(" "),a("p",[t._v("1.判断map是否为nil")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("判断是否并发读写 map，若是则抛出异常")]),t._v(" "),a("li",[t._v("判断 buckets 是否为 nil，若是则调用 newobject 根据当前 bucket 大小进行分配")])]),t._v(" "),a("h4",{attrs:{id:"迁移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移"}},[t._v("#")]),t._v(" 迁移")]),t._v(" "),a("p",[t._v("每一次进行赋值/删除操作时，只要oldbuckets != nil 则认为正在扩容，会做一次迁移工作，下面会详细说下迁移过程")]),t._v(" "),a("h4",{attrs:{id:"查找-更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找-更新"}},[t._v("#")]),t._v(" 查找&更新")]),t._v(" "),a("p",[t._v("根据上面查找过程，查找key所在位置，如果找到则更新，没找到则找空位插入即可")]),t._v(" "),a("h4",{attrs:{id:"扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),a("p",[t._v("经过前面迭代寻找动作，若没有找到可插入的位置，意味着需要扩容进行插入，下面会详细说下扩容过程")]),t._v(" "),a("h2",{attrs:{id:"删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),a("p",[t._v("通过汇编语言可以看到，向 map 中删除 key，最终调用的是 "),a("code",[t._v("mapdelete")]),t._v(" 函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func mapdelete(t \\*maptype, h _hmap, key unsafe.Pointer)\n")])])]),a("p",[t._v("删除的逻辑相对比较简单，大多函数在赋值操作中已经用到过，核心还是找到 key 的具体位置。寻找过程都是类似的，在 bucket 中挨个 cell 寻找。找到对应位置后，对 key 或者 value 进行“清零”操作，将 count 值减 1，将对应位置的 tophash 值置成 "),a("code",[t._v("Empty")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("e := add(unsafe.Pointer(b), dataOffset+bucketCnt*2*goarch.PtrSize+i*uintptr(t.elemsize))\nif t.elem.ptrdata != 0 {\n\tmemclrHasPointers(e, t.elem.size)\n} else {\n\tmemclrNoHeapPointers(e, t.elem.size)\n}\nb.tophash[i] = emptyOne\n")])])]),a("h2",{attrs:{id:"扩容-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容-2"}},[t._v("#")]),t._v(" 扩容")]),t._v(" "),a("h4",{attrs:{id:"扩容时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容时机"}},[t._v("#")]),t._v(" 扩容时机")]),t._v(" "),a("p",[t._v("再来说触发 map 扩容的时机：在向 map 插入新 key 的时候，会进行条件检测，符合下面这 2 个条件，就会触发扩容：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) {\n\t\thashGrow(t, h)\n\t\tgoto again // Growing the table invalidates everything, so try again\n\t}\n\n")])])]),a("p",[t._v("1、装载因子超过阈值")]),t._v(" "),a("p",[t._v("源码里定义的阈值是 6.5 (loadFactorNum/loadFactorDen)，是经过测试后取出的一个比较合理的因子")]),t._v(" "),a("p",[t._v("我们知道，每个 bucket 有 8 个空位，在没有溢出，且所有的桶都装满了的情况下，装载因子算出来的结果是 8。因此当装载因子超过 6.5 时，表明很多 bucket 都快要装满了，查找效率和插入效率都变低了。在这个时候进行扩容是有必要的。")]),t._v(" "),a("p",[t._v("对于条件 1，元素太多，而 bucket 数量太少，很简单：将 B 加 1，bucket 最大数量("),a("code",[t._v("2^B")]),t._v(")直接变成原来 bucket 数量的 2 倍。于是，就有新老 bucket 了。注意，这时候元素都在老 bucket 里，还没迁移到新的 bucket 来。新 bucket 只是最大数量变为原来最大数量的 2 倍("),a("code",[t._v("2^B * 2")]),t._v(") 。")]),t._v(" "),a("p",[t._v("2、overflow 的 bucket 数量过多")]),t._v(" "),a("p",[t._v("在装载因子比较小的情况下，这时候 map 的查找和插入效率也很低，而第 1 点识别不出来这种情况。表面现象就是计算装载因子的分子比较小，即 map 里元素总数少，但是 bucket 数量多（真实分配的 bucket 数量多，包括大量的 overflow bucket）")]),t._v(" "),a("p",[t._v("不难想像造成这种情况的原因：不停地插入、删除元素。先插入很多元素，导致创建了很多 bucket，但是装载因子达不到第 1 点的临界值，未触发扩容来缓解这种情况。之后，删除元素降低元素总数量，再插入很多元素，导致创建很多的 overflow bucket，但就是不会触发第 1 点的规定，你能拿我怎么办？overflow bucket 数量太多，导致 key 会很分散，查找插入效率低得吓人，因此出台第 2 点规定。这就像是一座空城，房子很多，但是住户很少，都分散了，找起人来很困难")]),t._v(" "),a("p",[t._v("对于条件 2，其实元素没那么多，但是 overflow bucket 数特别多，说明很多 bucket 都没装满。解决办法就是开辟一个新 bucket 空间，将老 bucket 中的元素移动到新 bucket，使得同一个 bucket 中的 key 排列地更紧密。这样，原来，在 overflow bucket 中的 key 可以移动到 bucket 中来。结果是节省空间，提高 bucket 利用率，map 的查找和插入效率自然就会提升。")]),t._v(" "),a("h4",{attrs:{id:"扩容函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容函数"}},[t._v("#")]),t._v(" 扩容函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('func hashGrow(t *maptype, h *hmap) {\n\tbigger := uint8(1)\n\tif !overLoadFactor(h.count+1, h.B) {\n\t\tbigger = 0\n\t\th.flags |= sameSizeGrow\n\t}\n\toldbuckets := h.buckets\n\tnewbuckets, nextOverflow := makeBucketArray(t, h.B+bigger, nil)\n\n\tflags := h.flags &^ (iterator | oldIterator)\n\tif h.flags&iterator != 0 {\n\t\tflags |= oldIterator\n\t}\n\t// commit the grow (atomic wrt gc)\n\th.B += bigger\n\th.flags = flags\n\th.oldbuckets = oldbuckets\n\th.buckets = newbuckets\n\th.nevacuate = 0\n\th.noverflow = 0\n\n\tif h.extra != nil && h.extra.overflow != nil {\n\t\t// Promote current overflow buckets to the old generation.\n\t\tif h.extra.oldoverflow != nil {\n\t\t\tthrow("oldoverflow is not nil")\n\t\t}\n\t\th.extra.oldoverflow = h.extra.overflow\n\t\th.extra.overflow = nil\n\t}\n\tif nextOverflow != nil {\n\t\tif h.extra == nil {\n\t\t\th.extra = new(mapextra)\n\t\t}\n\t\th.extra.nextOverflow = nextOverflow\n\t}\n\n\t// the actual copying of the hash table data is done incrementally\n\t// by growWork() and evacuate().\n}\n')])])]),a("p",[t._v("由于 map 扩容需要将原有的 key/value 重新搬迁到新的内存地址，如果有大量的 key/value 需要搬迁，会非常影响性能。因此 Go map 的扩容采取了一种称为“渐进式”的方式，原有的 key 并不会一次性搬迁完毕，每次最多只会搬迁 2 个 bucket。")]),t._v(" "),a("p",[t._v("上面说的 "),a("code",[t._v("hashGrow()")]),t._v(" 函数实际上并没有真正地“搬迁”，它只是分配好了新的 buckets，并将老的 buckets 挂到了 oldbuckets 字段上。真正搬迁 buckets 的动作在 "),a("code",[t._v("growWork()")]),t._v(" 函数中，而调用 "),a("code",[t._v("growWork()")]),t._v(" 函数的动作是在 mapassign 和 mapdelete 函数中。也就是插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作。先检查 oldbuckets 是否搬迁完毕，具体来说就是检查 oldbuckets 是否为 nil。")]),t._v(" "),a("h2",{attrs:{id:"迁移-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移-2"}},[t._v("#")]),t._v(" 迁移")]),t._v(" "),a("h4",{attrs:{id:"迁移时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移时机"}},[t._v("#")]),t._v(" 迁移时机")]),t._v(" "),a("p",[t._v("如果未迁移完毕，赋值/删除的时候，扩容完毕后（预分配内存），不会马上就进行迁移。而是采取"),a("strong",[t._v("增量扩容")]),t._v("的方式，当有访问到具体 bukcet 时，才会逐渐的进行迁移（将 oldbucket 迁移到 bucket）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("if h.growing() {\n\t\tgrowWork(t, h, bucket)\n}\n")])])]),a("h4",{attrs:{id:"迁移函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移函数"}},[t._v("#")]),t._v(" 迁移函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func growWork(t *maptype, h *hmap, bucket uintptr) {\n\t// 首先把需要操作的bucket 搬迁\n\tevacuate(t, h, bucket&h.oldbucketmask())\n\n\t // 再顺带搬迁一个bucket\n\tif h.growing() {\n\t\tevacuate(t, h, h.nevacuate)\n\t}\n}\n")])])]),a("p",[t._v("nevacuate 标识的是当前的进度，如果都搬迁完，应该和2^B的长度是一样的")]),t._v(" "),a("p",[t._v("在evacuate 方法实现是把这个位置对应的bucket，以及其冲突链上的数据都转移到新的buckets上。")]),t._v(" "),a("ol",[a("li",[t._v("先要判断当前bucket是不是已经转移。 (oldbucket 标识需要搬迁的bucket 对应的位置)")])]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("b := (*bmap)(add(h.oldbuckets, oldbucket*uintptr(t.bucketsize)))\n// 判断\nif !evacuated(b) {\n  // 做转移操作\n}\n")])])]),a("p",[t._v("转移的判断直接通过tophash 就可以，判断tophash中第一个hash值即可")]),t._v(" "),a("div",{staticClass:"language-golang extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func evacuated(b *bmap) bool {\n  h := b.tophash[0]\n  // 这个区间的flag 均是已被转移\n  return h > emptyOne && h < minTopHash // 1 ~ 5\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果没有被转移，那就要迁移数据了。数据迁移时，可能是迁移到大小相同的buckets上，也可能迁移到2倍大的buckets上。这里xy 都是标记目标迁移位置的标记：x 标识的是迁移到相同的位置，y 标识的是迁移到2倍大的位置上。我们先看下目标位置的确定：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var xy [2]evacDst\nx := &xy[0]\nx.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.bucketsize)))\nx.k = add(unsafe.Pointer(x.b), dataOffset)\nx.v = add(x.k, bucketCnt*uintptr(t.keysize))\nif !h.sameSizeGrow() {\n  // 如果是2倍的大小，就得算一次 y 的值\n  y := &xy[1]\n  y.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize)))\n  y.k = add(unsafe.Pointer(y.b), dataOffset)\n  y.v = add(y.k, bucketCnt*uintptr(t.keysize))\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("确定bucket位置后，需要按照kv 一条一条做迁移。")])]),t._v(" "),a("li",[a("p",[t._v("如果当前搬迁的bucket 和 总体搬迁的bucket的位置是一样的，我们需要更新总体进度的标记 nevacuate")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// newbit 是oldbuckets 的长度，也是nevacuate 的重点\nfunc advanceEvacuationMark(h *hmap, t *maptype, newbit uintptr) {\n  // 首先更新标记\n  h.nevacuate++\n\n  // 最多查看2^10 个bucket\n  stop := h.nevacuate + 1024\n  if stop > newbit {\n    stop = newbit\n  }\n\n  // 如果没有搬迁就停止了，等下次搬迁\n  for h.nevacuate != stop && bucketEvacuated(t, h, h.nevacuate) {\n    h.nevacuate++\n  }\n\n  // 如果都已经搬迁完了，oldbukets 完全搬迁成功，清空oldbuckets\n  if h.nevacuate == newbit {\n    h.oldbuckets = nil\n    if h.extra != nil {\n      h.extra.oldoverflow = nil\n    }\n    h.flags &^= sameSizeGrow\n  }\n")])])]),a("h2",{attrs:{id:"遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[t._v("#")]),t._v(" 遍历")]),t._v(" "),a("p",[t._v("遍历的过程，就是按顺序遍历 bucket，同时按顺序遍历 bucket 中的 key。")]),t._v(" "),a("p",[t._v("map遍历是无序的，如果想实现有序遍历，可以先对key进行排序")]),t._v(" "),a("p",[t._v("为什么遍历 map 是无序的？")]),t._v(" "),a("p",[t._v("如果发生过迁移，key 的位置发生了重大的变化，有些 key 飞上高枝，有些 key 则原地不动。这样，遍历 map 的结果就不可能按原来的顺序了。")]),t._v(" "),a("p",[t._v("如果就一个写死的 map，不会向 map 进行插入删除的操作，按理说每次遍历这样的 map 都会返回一个固定顺序的 key/value 序列吧。但是 Go 杜绝了这种做法，因为这样会给新手程序员带来误解，以为这是一定会发生的事情，在某些情况下，可能会酿成大错。")]),t._v(" "),a("p",[t._v("Go 做得更绝，当我们在遍历 map 时，并不是固定地从 0 号 bucket 开始遍历，每次都是从一个**随机值序号的 bucket "),a("strong",[t._v("开始遍历，并且是从这个 bucket 的一个")]),t._v("随机序号的 cell **开始遍历。这样，即使你是一个写死的 map，仅仅只是遍历它，也不太可能会返回一个固定序列的 key/value 对了。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//runtime.mapiterinit 遍历时选用初始桶的函数\nfunc mapiterinit(t *maptype, h *hmap, it *hiter) {\n  ...\n  it.t = t\n  it.h = h\n  it.B = h.B\n  it.buckets = h.buckets\n  if t.bucket.kind&kindNoPointers != 0 {\n    h.createOverflow()\n    it.overflow = h.extra.overflow\n    it.oldoverflow = h.extra.oldoverflow\n  }\n\n  r := uintptr(fastrand())\n  if h.B > 31-bucketCntBits {\n    r += uintptr(fastrand()) << 31\n  }\n  it.startBucket = r & bucketMask(h.B)\n  it.offset = uint8(r >> h.B & (bucketCnt - 1))\n  it.bucket = it.startBucket\n    ...\n\n  mapiternext(it)\n}\n")])])]),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ol",[a("li",[t._v("map是引用类型")]),t._v(" "),a("li",[t._v("map遍历是无序的")]),t._v(" "),a("li",[t._v("map是非线程安全的")]),t._v(" "),a("li",[t._v("map的哈希冲突解决方式是链表法")]),t._v(" "),a("li",[t._v("map的扩容不是一定会新增空间，也有可能是只是做了内存整理")]),t._v(" "),a("li",[t._v("map的迁移是逐步进行的，在每次赋值时，会做至少一次迁移工作")]),t._v(" "),a("li",[t._v("map中删除key，有可能导致出现很多空的kv，这会导致迁移操作，如果可以避免，尽量避免")])])])}),[],!1,null,null,null);a.default=s.exports}}]);