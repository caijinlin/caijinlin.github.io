(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{366:function(a,t,e){"use strict";e.r(t);var r=e(14),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"架构基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构基础"}},[a._v("#")]),a._v(" 架构基础")]),a._v(" "),t("p",[a._v("架构是顶层设计，具体是指某一套开发规范下的具体落地方案，包括各个模块之间的组合关系以及它们协同起来完成功能的运作规则，关注的是“结构”")]),a._v(" "),t("p",[a._v("一个系统的架构只包括顶层这一层级的架构，而不包括下属子系统层级的架构")]),a._v(" "),t("p",[a._v("从业务逻辑的角度分解，“学生管理系统”的架构是：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/af/a8/af3f5d6afe79d8c37b727606f749a1a8.jpg?wh=1920x422",alt:""}})]),a._v(" "),t("p",[a._v("从物理部署的角度分解，“学生管理系统”的架构是：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/28/69/28ca0b7912ea0dda4a9fd4ceec75bf69.jpg?wh=1920x941",alt:""}})]),a._v(" "),t("p",[a._v("从开发规范的角度分解，“学生管理系统”的架构是：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/3e/1d/3e5f788e9dceb7f2cd9eb79d0d92fd1d.jpg?wh=1920x717",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"_4r-架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4r-架构"}},[a._v("#")]),a._v(" 4R 架构")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/67/c1/670a502889683719f63846762a710ec1.jpg?wh=1920x466",alt:""}})]),a._v(" "),t("blockquote",[t("p",[a._v("软件架构指软件系统的顶层（Rank）结构，它定义了系统由哪些角色（Role）组成，角色之间的关系（Relation）和运作规则（Rule）")])]),a._v(" "),t("p",[a._v("Rank 、Role、Relation 对应架构图，Rule 对应时序图")]),a._v(" "),t("p",[a._v("Rank：它是指软件架构是分层的，对应“系统”和“子系统”的分层关系。通常情况下，我们只需要关注某一层的架构，最多展示相邻两层的架构，而不需要把每一层的架构全部糅杂在一起。无论是架构设计还是画架构图，都应该采取“自顶向下，逐步细化”的方式")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/45/b1/452ce48209b1e9ea77484e68dbb8f0b1.jpg?wh=1920x931",alt:""}})]),a._v(" "),t("p",[a._v("注：L0\\L1\\L2 指层级，一个 L0 往下可以分解多个 L1，一个 L1 可以往下分解多个 L2，以此类推，一般建议不超过 5 层（L0~L4）。")]),a._v(" "),t("p",[a._v("Role：它是指软件系统包含哪些角色，每个角色都会负责系统的一部分功能。架构设计最重要的工作之一就是将系统拆分为多个角色。最常见的微服务拆分其实就是将整体复杂的业务系统按照业务领域的方式，拆分为多个微服务，每个微服务就是系统的一个角色")]),a._v(" "),t("p",[a._v("Relation：它是指软件系统的角色之间的关系，对应到架构图中其实就是连接线，角色之间的关系不能乱连，任何关系最后都需要代码来实现，包括连接方式（HTTP、TCP、UDP 和串口等）、数据协议（JSON、XML 和二进制等）以及具体的接口等")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/95/fc/952cdceaa1bd5ed9f5fb039733dabafc.jpg?wh=1920x1002",alt:""}})]),a._v(" "),t("p",[a._v("Rule：它是指软件系统角色之间如何协作来完成系统功能。我们在前面解读什么是“系统”的时候提到过：系统能力不是个体能力之和，而是产生了新的能力。那么这个新能力具体如何完成的呢？具体哪些角色参与了这个新能力呢？这就是 Rule 所要表达的内容。在架构设计的时候，核心的业务场景都需要设计 Rule")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/0e/ea/0e7a35a01b62e5590566c09eff6b19ea.jpg?wh=1920x1080",alt:""}})]),a._v(" "),t("h2",{attrs:{id:"框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[a._v("#")]),a._v(" 框架")]),a._v(" "),t("p",[a._v("框架是面向编程或配置的半成品，框架关注的是“规范”。比如 MVP、MVVM、J2EE 等框架")]),a._v(" "),t("h2",{attrs:{id:"系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统"}},[a._v("#")]),a._v(" 系统")]),a._v(" "),t("p",[a._v("系统是相互协同可运行的实体。比如微信本身是一个系统，包含聊天、登录、支付、朋友圈等子系统")]),a._v(" "),t("h2",{attrs:{id:"模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[a._v("#")]),a._v(" 模块")]),a._v(" "),t("p",[a._v("模块是从业务维度上职责的划分。从业务逻辑的角度来拆分系统后，得到的单元就是“模块”，划分模块的主要目的是职责分离。比如学生信息管理系统，这个系统从逻辑的角度来拆分，可以分为“登录注册模块”、“个人信息模块”和“个人成绩模块”")]),a._v(" "),t("h2",{attrs:{id:"组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[a._v("#")]),a._v(" 组件")]),a._v(" "),t("p",[a._v("组件是从技术维度上的复用。从物理部署的角度来拆分系统后，得到的单元就是“组件”，划分组件的主要目的是单元复用。比如学生信息管理系统，从物理的角度来拆分，可以拆分为 Nginx、Web 服务器和 MySQL")])])}),[],!1,null,null,null);t.default=s.exports}}]);