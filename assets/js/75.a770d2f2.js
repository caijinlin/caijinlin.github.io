(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{344:function(e,s,t){"use strict";t.r(s);var i=t(14),n=Object(i.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"redis-底层数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-底层数据结构"}},[e._v("#")]),e._v(" redis 底层数据结构")]),e._v(" "),s("p",[e._v("https://juejin.im/post/5d71d3bee51d453b5f1a04f1#heading-18\nhttps://www.cnblogs.com/ysocean/p/9080942.html")]),e._v(" "),s("ul",[s("li",[e._v("SDS (简单动态字符串,底层用字节数组实现)")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("struct sdshdr{\n     //记录buf数组中已使用字节的数量\n     //等于 SDS 保存字符串的长度\n     int len;\n     //记录 buf 数组中未使用字节的数量\n     int free;\n     //字节数组，用于保存字符串\n     char buf[];\n}\n")])])]),s("ul",[s("li",[e._v("链表 (用无环双端链表实现)")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef  struct listNode{\n       //前置节点\n       struct listNode *prev;\n       //后置节点\n       struct listNode *next;\n       //节点的值\n       void *value;  \n}listNode\n\ntypedef struct list{\n     //表头节点\n     listNode *head;\n     //表尾节点\n     listNode *tail;\n     //链表所包含的节点数量\n     unsigned long len;\n     //节点值复制函数\n     void (*free) (void *ptr);\n     //节点值释放函数\n     void (*free) (void *ptr);\n     //节点值对比函数\n     int (*match) (void *ptr,void *key);\n}list;\n")])])]),s("ul",[s("li",[e._v("字典（用哈希table,链地址法实现，字典里面next指针指向下一个具有相同索引值的哈希表节点）")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef struct dictht{\n     //哈希表数组\n     dictEntry **table;\n     //哈希表大小\n     unsigned long size;\n     //哈希表大小掩码，用于计算索引值\n     //总是等于 size-1\n     unsigned long sizemask;\n     //该哈希表已有节点的数量\n     unsigned long used;\n \n}dictht\n\ntypedef struct dictEntry{\n     //键\n     void *key;\n     //值\n     union{\n          void *val;\n          uint64_tu64;\n          int64_ts64;\n     }v;\n \n     //指向下一个哈希表节点，形成链表\n     struct dictEntry *next;\n}dictEntry\n")])])]),s("ul",[s("li",[e._v("跳跃表 (多层链表结构组成)")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef struct zskiplistNode {\n     //层\n     struct zskiplistLevel{\n           //前进指针\n           struct zskiplistNode *forward;\n           //跨度\n           unsigned int span;\n     }level[];\n \n     //后退指针\n     struct zskiplistNode *backward;\n     //分值\n     double score;\n     //成员对象\n     robj *obj;\n \n} zskiplistNode\n\ntypedef struct zskiplist{\n     //表头节点和表尾节点\n     structz skiplistNode *header, *tail;\n     //表中节点的数量\n     unsigned long length;\n     //表中层数最大的节点的层数\n     int level;\n \n}zskiplist;\n")])])]),s("ul",[s("li",[e._v("整数集合 (支持多种类型的整数值)")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef struct intset{\n     //编码方式\n     uint32_t encoding;\n     //集合包含的元素数量\n     uint32_t length;\n     //保存元素的数组\n     int8_t contents[];\n \n}intset;\n")])])]),s("ul",[s("li",[e._v("压缩列表 （压缩列表并不是对数据利用某种算法进行压缩，而是将数据按照一定规则编码在一块连续的内存区域，目的是节省内存）\n①、previous_entry_ength：记录压缩列表前一个字节的长度。previous_entry_ength的长度可能是1个字节或者是5个字节，如果上一个节点的长度小于254，则该节点只需要一个字节就可以表示前一个节点的长度了，如果前一个节点的长度大于等于254，则previous length的第一个字节为254，后面用四个字节表示当前节点前一个节点的长度。利用此原理即当前节点位置减去上一个节点的长度即得到上一个节点的起始位置，压缩列表可以从尾部向头部遍历。这么做很有效地减少了内存的浪费。\n②、encoding：节点的encoding保存的是节点的content的内容类型以及长度，encoding类型一共有两种，一种字节数组一种是整数，encoding区域长度为1字节、2字节或者5字节长。\n③、content：content区域用于保存节点的内容，节点内容类型和长度由encoding决定。")])]),e._v(" "),s("h2",{attrs:{id:"redis-持久化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-持久化"}},[e._v("#")]),e._v(" redis 持久化")]),e._v(" "),s("p",[e._v("https://juejin.im/post/5d09a9ff51882577eb133aa9#heading-9")]),e._v(" "),s("ul",[s("li",[e._v("RDB （快照存储持久化方式）")]),e._v(" "),s("li",[s("ul",[s("li",[e._v("将redis莫一刻内存数据保存到硬盘文件，dump.rdb")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("服务器启动时加载到内存中恢复数据")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("命令触发： save/bgsave(开启子进程，异步操作，fock子进程过程是同步的)")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("执行过程：生成临时rdb写入数据，完成时替换正式rdb，删除旧文件")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("# 是否压缩rdb文件\nrdbcompression yes\n\n# rdb文件的名称\ndbfilename redis-6379.rdb\n\n# rdb文件保存目录\ndir ~/redis/\n")])])]),s("ul",[s("li",[e._v("AOF (Append-only file)")]),e._v(" "),s("li",[s("ul",[s("li",[e._v("AOF持久化方式会记录客户端对服务器的每一次写操作命令，并将这些写操作以Redis协议追加保存到以后缀为aof文件末尾")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("三种写入策略： always/everysec（每秒写）/no(又操作系统决定什么时候写，不建议)")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("两种重写方式： no-appendfsync-on-rewrite(以配置的方式开启)/bgrewriteaof（命令触发）")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("AOF文件损坏时： redis-check-aof -fix file.aof 修复")])])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('# 开启aof机制\nappendonly yes\n\n# aof文件名\nappendfilename "appendonly.aof"\n\n# 写入策略,always表示每个写操作都保存到aof文件中,也可以是everysec或no\nappendfsync always\n\n# 默认不重写aof文件\nno-appendfsync-on-rewrite no\n\n# 保存目录\ndir ~/redis/\n')])])]),s("h2",{attrs:{id:"redis-回收机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-回收机制"}},[e._v("#")]),e._v(" redis 回收机制")]),e._v(" "),s("p",[e._v("https://juejin.im/post/5d107ad851882576df7fba9e#heading-16\nredis结构体结构：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("typedef struct redisDb {\n        dict *dict;                 /* 数据库的键空间，保存数据库中的所有键值对 */\n        dict *expires;              /* 保存所有过期的键 */\n        dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/\n        dict *ready_keys;           /* Blocked keys that received a PUSH */\n        dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */\n        int id;                     /* 数据库ID字段，代表不同的数据库 */\n        long long avg_ttl;          /* Average TTL, just for stats */\n} redisDb;\n")])])]),s("ul",[s("li",[e._v("用字典来保存每一个键值对")]),e._v(" "),s("li",[e._v("expire过期方式：")]),e._v(" "),s("li",[s("ul",[s("li",[e._v("设置了过期时间的，过期后加入expires")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("调用 expire命令，过期的key")])])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("恢复或修改数据时，过期的key")])])])]),e._v(" "),s("h3",{attrs:{id:"过期删除策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过期删除策略"}},[e._v("#")]),e._v(" 过期删除策略")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("定时删除（key过期回收， redis并未采用，会有很多timerfd）")])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("对于每一个设置了过期时间的key都会创建一个定时器，一旦到达过期时间就立即删除，消耗CPU")])])]),e._v(" "),s("li",[s("p",[e._v("惰性删除（查询的时候，看key有没有过期，触发回收）")])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("当访问一个key时，才判断该key是否过期，过期则删除。节省CPU资源，对内存却十分不友好。有一种极端的情况是可能出现大量的过期key没有被再次访问，因此不会被清除，导致占用了大量的内存。")])])]),e._v(" "),s("li",[s("p",[e._v("定期删除（每隔一段时间，删除过期key, 默认时100ms执行一次）")])]),e._v(" "),s("li",[s("ul",[s("li",[e._v("每隔一段时间，扫描Redis中过期key字典，并清除部分过期的key，还可以通过调整定时扫描的时间间隔和每次扫描的限定耗时")])])]),e._v(" "),s("li",[s("p",[e._v("del")])]),e._v(" "),s("li",[s("p",[e._v("unlink")])])]),e._v(" "),s("h3",{attrs:{id:"过期删除策略实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过期删除策略实现"}},[e._v("#")]),e._v(" 过期删除策略实现")]),e._v(" "),s("ul",[s("li",[e._v("启动时注册时间事件，在定时器回调过程中执行")]),e._v(" "),s("li",[e._v("访问key时，若过期则清除")]),e._v(" "),s("li",[e._v("每次事件循环执行时，主动清理部分过期的key")])]),e._v(" "),s("p",[e._v("总结：\nRedis的过期删除策略是在启动时注册了serverCron函数，每一个时间时钟周期，都会抽取expires字典中的部分key进行清理，从而实现定期删除\nRedis会在访问key时判断key是否过期，如果过期了，就删除\n以及每一次Redis访问事件到来时，beforeSleep都会调用activeExpireCycle函数，在1ms时间内主动清理部分key，这是惰性删除的实现")]),e._v(" "),s("h3",{attrs:{id:"内存淘汰策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存淘汰策略"}},[e._v("#")]),e._v(" 内存淘汰策略")]),e._v(" "),s("p",[e._v("Redis的内存淘汰策略，是指内存达到maxmemory极限时，使用某种算法来决定清理掉哪些数据，以保证新数据的存入")]),e._v(" "),s("ul",[s("li",[e._v("noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错。")]),e._v(" "),s("li",[e._v("allkeys-lru：当内存不足以容纳新写入数据时，在键空间（server.db[i].dict）中，移除最近最少使用的 key（这个是最常用的）。")]),e._v(" "),s("li",[e._v("allkeys-random：当内存不足以容纳新写入数据时，在键空间（server.db[i].dict）中，随机移除某个 key。")]),e._v(" "),s("li",[e._v("volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（server.db[i].expires）中，移除最近最少使用的 key。")]),e._v(" "),s("li",[e._v("volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（server.db[i].expires）中，随机移除某个 key。")]),e._v(" "),s("li",[e._v("volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（server.db[i].expires）中，有更早过期时间的 key 优先移除。")])]),e._v(" "),s("p",[e._v("淘汰时机： 每一次执行命令时，检查是否达到最大内存，是则出发内存淘汰")]),e._v(" "),s("h2",{attrs:{id:"redis异步非阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis异步非阻塞"}},[e._v("#")]),e._v(" redis异步非阻塞")]),e._v(" "),s("p",[e._v("维护EventLoop对象\n里面有两个数组events,fired。events存放被注册的事件，fired用于存放EventLoop从多路复用器（epoll）中读取到的，将要执行的事件\n异步和非阻塞就反映在这里，注册到多路复用器（epoll）后去做其他事，之后通过主动轮询多路复用器，来逐个取出将要执行的事件，放入fired，逐个执行")]),e._v(" "),s("h2",{attrs:{id:"redis五种数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis五种数据结构"}},[e._v("#")]),e._v(" redis五种数据结构")]),e._v(" "),s("ul",[s("li",[e._v("string => set/del   SDS")])]),e._v(" "),s("p",[e._v("集合类型")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("list => lpush/lpop")])]),e._v(" "),s("li",[s("p",[e._v("hash => hset/hdel")])]),e._v(" "),s("li",[s("p",[e._v("set => sadd/srem")])]),e._v(" "),s("li",[s("p",[e._v("zset => zadd/zrem")])]),e._v(" "),s("li",[s("p",[e._v("bitmap => 位图存储")])]),e._v(" "),s("li",[s("p",[e._v("geo => 地理空间key存储， 二分法bit位")])]),e._v(" "),s("li",[s("p",[e._v("hyperloglog => 内存非常小，聚合查询快，但存在偏差")])]),e._v(" "),s("li",[s("p",[e._v("streams => 发布订阅多组模式\nhttps://www.cnblogs.com/CryFace/p/13762241.html")])])]),e._v(" "),s("h2",{attrs:{id:"redis-lua"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-lua"}},[e._v("#")]),e._v(" redis lua")]),e._v(" "),s("p",[e._v("script.lua")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('local key = "rate.limit:" .. KEYS[1]\nlocal limit = tonumber(ARGV[1])\nlocal expire_time = ARGV[2]\n\nlocal is_exists = redis.call("EXISTS", key)\nif is_exists == 1 then\n    if redis.call("INCR", key) > limit then\n        return 0\n    else\n        return 1\n    end\nelse\n    redis.call("SET", key, 1)\n    redis.call("EXPIRE", key, expire_time)\n    return 1\nend\n')])])]),s("p",[e._v('return 1 == (long) connection.eval(loadScriptString("script.lua"), keys, argv);')]),e._v(" "),s("h2",{attrs:{id:"redis发布订阅"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis发布订阅"}},[e._v("#")]),e._v(" redis发布订阅")]),e._v(" "),s("p",[e._v('subscribe cesar\npublish cesar "hello word"')]),e._v(" "),s("h2",{attrs:{id:"redis-一致性hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-一致性hash"}},[e._v("#")]),e._v(" redis 一致性hash")]),e._v(" "),s("p",[e._v("hash环对2^32取模")]),e._v(" "),s("h2",{attrs:{id:"redis主从-哨兵-集群的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis主从-哨兵-集群的区别"}},[e._v("#")]),e._v(" redis主从，哨兵，集群的区别")]),e._v(" "),s("p",[e._v("主从：一主一从，启动时从库向主库发送sync命令，主库收到sync命令后在生成快照，并缓存保存快照期间收到的命令，当快照完成时，主库将快照和缓存的命令一起发送给从库，从库进行重放\n哨兵：哨兵机制主要解决主从模式中当主库发送故障，需要人为手动将从库升级为主库的问题。哨兵的作用就是监控redis主从数据库是否正常运行，主出现故障自动将从数据库转换为主数据库\n集群：redis实例存储的内容是完整的数据，浪费内存，为了最大划利用内存，采用集群模式，就是分布式存储。每台redis存储不同的内容，集群至少是三主三从")]),e._v(" "),s("h2",{attrs:{id:"redis-缓存雪崩-缓存击穿-缓存穿透"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-缓存雪崩-缓存击穿-缓存穿透"}},[e._v("#")]),e._v(" redis 缓存雪崩，缓存击穿，缓存穿透")]),e._v(" "),s("ul",[s("li",[e._v("缓存雪崩: 大量key同一时间过期，redis故障 => 减少key同一时间过期，限流，熔断机制")]),e._v(" "),s("li",[e._v("缓存击穿: 热点key过期 => 热点key不设置过期时间")]),e._v(" "),s("li",[e._v("缓存穿透: 数据在redis/mysql中都不存在 => 设置空值")])]),e._v(" "),s("h2",{attrs:{id:"redis-原子操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-原子操作"}},[e._v("#")]),e._v(" redis 原子操作")]),e._v(" "),s("ul",[s("li",[e._v("multi exec")]),e._v(" "),s("li",[e._v("lua脚本")])]),e._v(" "),s("h2",{attrs:{id:"redis-锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-锁"}},[e._v("#")]),e._v(" redis 锁")]),e._v(" "),s("p",[e._v("setnx\ngetset\n比如解决死锁，保证只有一个线程\nhttps://blog.csdn.net/wcuuchina/article/details/89154434")]),e._v(" "),s("h2",{attrs:{id:"电商抢购案例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电商抢购案例"}},[e._v("#")]),e._v(" 电商抢购案例")]),e._v(" "),s("ul",[s("li",[e._v("前端CDN")]),e._v(" "),s("li",[e._v("后端nginx限流，放少量链接进来")]),e._v(" "),s("li",[e._v("redis锁，不能超卖")])])])}),[],!1,null,null,null);s.default=n.exports}}]);